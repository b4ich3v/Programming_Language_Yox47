function imod(x: int, m: int) int {
    int q = x / m;
    return x - q * m;
}

function isOdd(v: int) int {
    int rem = v - (v / 2) * 2;
    return rem;
}

function powMod(base: int, exp: int, mod: int) int {
    int res = 1;
    int cur = imod(base, mod);
    int e = exp;

    while (e > 0) {
        if (isOdd(e) == 1) {
            res = imod(res * cur, mod);
        }
        cur = imod(cur * cur, mod);
        e = e / 2;
    }
    return res;
}

function isWitness(a: int, n: int, d: int, r: int) bool {
    int x = powMod(a, d, n);

    if (x == 1) return false;
    if (x == n - 1) return false;

    int i = 1;
    while (i < r) {
        x = imod(x * x, n);
        if (x == n - 1) return false;
        i = i + 1;
    }
    return true;
}

function isPrime(n: int) bool {
    if (n < 2) return false;
    if (n == 2 || n == 3) return true;
    if (!isOdd(n)) return false;

    int d = n - 1;
    int r = 0;

    while (!isOdd(d)) {
        d = d / 2;
        r = r + 1;
    }

    if (isWitness(2, n, d, r) == 1) return false;
    if (isWitness(7, n, d, r) == 1) return false;
    if (isWitness(61, n, d, r) == 1) return false;

    return true;
}

function main() int {
    int v1 = 2147483647;
    int v2 = 2147483645;

    bool p1 = isPrime(v1);
    bool p2 = isPrime(v2);

    print_bool(p1);
    print_newline();
    print_bool(p2);
    print_newline();

    return 0;
}
